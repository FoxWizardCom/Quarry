{% extends 'base.html.twig' %}

{% block title %}Quarry!{% endblock %}
{% block stylesheets %}
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.css">
    <link rel="stylesheet" href="{{ asset('assets/css/story.css') }}" />
    <script src="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.js"></script>
    <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>
{% endblock %}

{% block body %}
    <div id="showDetail">-</div>
    <div id='map'></div>
    <div id="message"></div>
    <div id="detail" class="overlay-open">
        <div id="story" class="story" style="background-color:{{ story.color }}; color:{{ story.textColor }};">
            <p class="title">Story: {{ story.title }}</p>
            <div class="content">{{ story.content }}</div>
                {% for chapter in story.chapters %}
                        <div id="chapter{{ chapter.id }}" class="chapter hidden" style="background-color:{{ chapter.color }}; color:{{ chapter.textColor }};">
                            <p class="title">Chapter {{ chapter.number }}: {{ chapter.title }}</p>
                            <p class="content">{{ chapter.content|raw }}</p>
                                {% for mission in chapter.missions %}
                                    <div id="mission{{ mission.id }}" data-chapter="{{ chapter.id }}" class="mission hidden" style="background-color:{{ mission.color }}; color:{{ mission.textColor }};">
                                        <p class="title">Mission {{ mission.number }}<div class="title hidden">{{ mission.title }}</div></p>
                                        <p class="content">{{ mission.content }}</p>
                                            {% for checkpoint in mission.checkpoints %}
                                                    <div id="checkpoint{{ checkpoint.id }}" data-chapter="{{ chapter.id }}" data-mission="{{ mission.id }}" class="checkpoint hidden" style="background-color:{{ checkpoint.color }}; color:{{ checkpoint.textColor }};">
                                                        <p class="title">Checkpoint {{ checkpoint.number }}: {{ checkpoint.title }}</p>
                                                        {% for hint in checkpoint.hints %}
                                                            <div id="hint{{ hint.id }}" data-chapter="{{ chapter.id }}" data-mission="{{ mission.id }}" data-checkpoint="{{ checkpoint.id }}" class="hint hidden" style="background-color:{{ checkpoint.color }}; color:{{ checkpoint.textColor }};">
                                                            <b><u>Hint</u> {{ hint.title }} : </b> {{ hint.content }}
                                                            </div>
                                                        {% endfor %}
                                                        <p class="content">{{ checkpoint.content }}
                                                        </p>
                                                        </div>
                                            {% endfor %}
                                    </div>
                                {% endfor %}
                        </div>
                {% endfor %}
            <button id="continueBtn">Continue</button>
            </div>
        </div>
    <script>

      var progressions = [];
      var mapMarkers = new Map();

      var map;
      var userMarker;

      function convertVariables(){
            {% for progression in progressions %}
                progressions.push({
                       // userStoryId: {{ progression.userStory.id }},
                        id: {{  progression.id }},
                        chapterId: {{ progression.chapter.id }},
                        missionId: {% if progression.mission %}{{ progression.mission.id }} {% else %} 0 {% endif %},
                        checkpointId: {% if progression.checkpoint %}{{ progression.checkpoint.id }} {% else %} 0 {% endif %},
                        timeStarted: {{ progression.timeStarted }},
                        timeFinished: {{ progression.timeFinished }}
                });
          console.log(progressions);
            {% endfor %}
            var mapMarkerId;
            var mapMarkerObject;
            {% for chapter in story.chapters %}
                {% for mission in chapter.missions %}
           mapMarkerId = "mission" + {{ mission.id }};
           mapMarkerObject = {
              id: {{ mission.id }},
              title: "{{ mission.title }}",
              content: "{{ mission.content }}",
              latitude: {{ mission.latitude }},
              longitude: {{ mission.longitude }},
              radius: {{ mission.radius }},
              color: '{{ mission.color }}',
              accent: '{{ mission.textColor }}',
              visibility: 0
          };
             mapMarkers.set(mapMarkerId, mapMarkerObject);
                    {#mapMarkers["mission" + {{ mission.id }}] = {#}
                        {#id: {{ mission.id }},#}
                        {#title: "{{ mission.title }}",#}
                        {#content: "{{ mission.content }}",#}
                        {#latitude: {{ mission.latitude }},#}
                        {#longitude: {{ mission.longitude }},#}
                        {#radius: {{ mission.radius }},#}
                        {#color: '{{ mission.color }}',#}
                        {#accent: '{{ mission.textColor }}',#}
                        {#visibility: 0#}
                         {#};#}

                    {% for checkpoint in mission.checkpoints %}
                     mapMarkerId = "checkpoint" + {{ checkpoint.id }};
                     mapMarkerObject = {
                        id: {{ checkpoint.id }},
                        title: "{{ checkpoint.title }}",
                        content: "{{ checkpoint.content }}",
                        latitude: {{ checkpoint.latitude }},
                        longitude: {{ checkpoint.longitude }},
                        radius: {{ checkpoint.radius }},
                        color: '{{ checkpoint.color }}',
                        accent: '{{ checkpoint.textColor }}',
                        visibility: 0
                    };
                     mapMarkers.set(mapMarkerId, mapMarkerObject);
                        {#mapMarkers["checkpoint" + {{ checkpoint.id }}] = {#}
                            {#id: {{ checkpoint.id }},#}
                            {#title: "{{ checkpoint.title }}",#}
                            {#content: "{{ checkpoint.content }}",#}
                            {#latitude: {{ checkpoint.latitude }},#}
                            {#longitude: {{ checkpoint.longitude }},#}
                            {#radius: {{ checkpoint.radius }},#}
                            {#color: '{{ checkpoint.color }}',#}
                            {#accent: '{{ checkpoint.textColor }}',#}
                            {#visibility: 0#}
                        {#};#}
                    {% endfor %}
                {% endfor %}
            {% endfor %}
          console.log("fill list from BACK : " + mapMarkers.length);
        }

      /*  function findNextProgression(){
            var progression = null;
            for(var i = 0; i < progressions.length; i++){
                if(progressions[i].timeStarted != 0 && progressions[i].timeFinished == 0){
                    progression = progressions[i];
                }
            }
            //if no progressions have been started start the first one
            if(progression == null){
                progression = progressions[0];
               // saveStartProgression(progression);
            }

            $('#chapter'+ progression.chapterId ).removeClass('hidden');

            $('.startChapter').on('click', function(){
                startChapter($(this).data("chapter"));
                $(this).attr("disabled", "true");
            });
        }*/

      var currentProgressionIndex;

      function setupStoryFromProgression(){
          currentProgressionIndex = findCurrentProgressionIndex();
          var currentProgression = progressions[currentProgressionIndex];
          showStoryFromProgression(currentProgression);
      }

      function showStoryFromProgression(currentProgression){
          //TODO check if progression is Chapter Mission or Checkpoint and show html content accordingly
          console.log(currentProgression);

          if(currentProgression != null) {
              if (currentProgression.chapterId != 0) {
                  var chapterId = currentProgression.chapterId;
                  console.log("show Chapter " + chapterId );
                  $('#chapter' + chapterId).removeClass("hidden");
                  if (currentProgression.missionId != 0) {
                      var missionId = currentProgression.missionId;
                      console.log("show Mission " + missionId);
                      $('#mission' + missionId ).removeClass('hidden');
                      if (currentProgression.checkpointId != 0) {
                          var checkpointId = currentProgression.checkpointId;
                          console.log("show Checkpoint " + checkpointId);
                          $('#checkpoint' + checkpointId).removeClass('hidden');
                      }
                  }
              }
          }
      }

      function findCurrentProgressionIndex(){
          var progressionIndex = null;
          for(var i = 0; i < progressions.length; i++){
              if(progressions[i].timeStarted != 0 && progressions[i].timeFinished == 0) {
                  progressionIndex = i;
              }
          }
          return progressionIndex;
      }

     /* function startChapter(chapterId){
          console.log('#chapter' + chapterId + ">.content");
            $('#chapter' + chapterId + ">.content").removeClass("hidden");

          //TODO find first Mission in chapter
          var progression = null;
          for(var i = 0; i < progressions.length; i++){
                if(progressions[i].chapterId == chapterId && progressions[i].timeFinished == 0) {
                    progression = progressions[i];
                    break;
              }
          }
          saveStartProgression(progression);

          for(var i = 0; i < progressions.length; i++){
              if(progressions[i].chapterId == chapterId && progressions[i].missionId != 0 && progressions[i].timeFinished == 0) {
                  progression = progressions[i];
                  break;
              }
          }

          $('#mission' + progression.missionId ).removeClass('hidden');

          $('#mission' + progression.missionId + ' .startMission').on('click', function(){
              startMission(chapterId, $(this).data("mission"));
              $(this).attr("disabled", "true");
          })
      }

      function startMission(chapterId, missionId){
          $('#mission' + missionId + ">.content").removeClass("hidden");
          $('#mission' + missionId + " .title").removeClass("hidden");

          //TODO find first checkpoint in Mission
          var progression = null;
          for(var i = 0; i < progressions.length; i++){
              if(progressions[i].chapterId == chapterId && progressions[i].missionId == missionId && progressions[i].timeFinished == 0) {
                  progression = progressions[i];
                  break;
              }
          }
          saveStartProgression(progression);

          for(var i = 0; i < progressions.length; i++){
              if(progressions[i].chapterId == chapterId && progressions[i].missionId == missionId && progressions[i].checkpointId != 0 && progressions[i].timeFinished == 0) {
                  progression = progressions[i];
                  break;
              }
          }

          console.log("add Marker to Map: " + "mission" + progression.missionId);
          addMarkerToMap(mapMarkers["mission" + progression.missionId]);
          $('#checkpoint' + progression.checkpointId ).removeClass('hidden');
          console.log('#checkpoint' + progression.checkpointId + ' .startCheckpoint');
          $('#checkpoint' + progression.checkpointId + ' .startCheckpoint').on('click', function(){
              startCheckpoint(chapterId, missionId, $(this).data("checkpoint"));
              $(this).attr("disabled", "true");
          })
      }*/

      function addMarkerToMap(marker){
          console.log("add Marker: " + marker.title + " " + marker.content);
          L.circle([marker.latitude, marker.longitude], marker.radius, {
              color: marker.accent,
              fillColor: marker.color,
              fillOpacity: 0.6
          }).addTo(map).bindPopup(marker.title);
      }
/*
      function startCheckpoint(chapterId, missionId, checkpointId){
          $('#checkpoint' + checkpointId + " .hint").removeClass("hidden");
          $('#checkpoint' + checkpointId + " .foundCheckpoint").removeClass("hidden");
          //TODO find first checkpoint in Mission
          var progression = null;
          for(var i = 0; i < progressions.length; i++){
              if(progressions[i].chapterId == chapterId
                      && progressions[i].missionId == missionId
                      && progressions[i].checkpointId == checkpointId
                      && progressions[i].timeFinished == 0
              ){
                  progression = progressions[i];
                  break;
              }
          }
          saveStartProgression(progression);
          console.log("add Marker to Map: " + "checkpoint" + progression.checkpointId);
          /*$('#checkpoint' + progression.checkpointId ).removeClass('hidden');
          console.log('#checkpoint' + progression.checkpointId + ' .startCheckpoint');
          $('#checkpoint' + progression.checkpointId + ' .startCheckpoint').on('click', function(){
              startCheckpoint(chapterId, missionId, $(this).data("checkpoint"));
              $(this).attr("disabled", "true");
          })*
          $('#checkpoint' + checkpointId + ' .foundCheckpoint').on('click', function(){
              var checkpointId = $(this).data("checkpoint");
              var marker = mapMarkers["checkpoint" + checkpointId];

           if(measureDistance(userMarker.getLatLng(), [marker.latitude, marker.longitude]) < marker.radius) {
              addMarkerToMap(marker);
                  alert("felicitations! vous avez trouvé le Checkpoint!");
                  //TODO startNextCheckpoint DIRTy AS FUCK!
                  $('#checkpoint14').removeClass('hidden');
                  startCheckpoint(chapterId, missionId, 14);
                  $('#checkpoint' + checkpointId + ">.content").removeClass("hidden");
                  $(this).attr("disable", "true");
                  saveFinishedProgression(findCheckpointFromProgression(checkpointId))
              }else{
                  alert("Vous êtes trop loin du Checkpoint, rapprochez vous!");
              }
          });
      }

      function findCheckpointFromProgression(checkpointId){
          for(var i = 0; i < progressions.length; i++){
              var progression = progressions[i];
              if(progression.checkpointId == checkpointId) {
                  return progression;
              }
          }
      }*/

      function degToRad(value){
          return value * (Math.PI / 180);
      }

      function measureDistance(location1, location2){
          console.log("locationCoords: " + "," + location1[0] + "," + location1[1]
                  + "," + location2[0]
                  + "," + location2[1]);
          var R = 6371; // km
          var dLat = degToRad(location2[0] - location1[0]);
          var dLon = degToRad(location2[1] - location1[1]);
          var lat1 = degToRad(location1[0]);
          var lat2 = degToRad(location2[0]);

          var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);
          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
          console.log("DISTANCE BETWEEN TWO LOCATIONS: " + R * c);
          return R * c;
      }

     /* function areMarkersTouching(marker){

          if(marker.circle.getBounds().contains(userMarker)){
              console.log('in');
              return true;
          }else{
console.log('out');
              return false;
          }
      }
*/
        function setupMap() {
            map = L.map('map').fitWorld();

            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox.streets',
                accessToken: 'pk.eyJ1IjoiZm94d2l6YXJkIiwiYSI6ImNpdjd5a3I3ZTAwMG0yb255NHN5b2NyajgifQ.PmTe7X9ZZGrmIXaN5vJoeg'
            }).addTo(map);

            userMarker = L.marker([0,0]);
            userMarker.addTo(map);

            map.on('locationfound', onLocationFound);
            map.on('locationerror', onLocationError);
            map.locate({setView: true, maxZoom: 15});

          //  setupMarkers();

            setInterval(function() {
                map.on('locationfound', onLocationFound);
                map.on('locationerror', onLocationError);
                map.locate({setView: false, maxZoom: 16});
            }, 10 * 1000); // 60 * 1000 milsec
        }

      /*  function setupMarkers(){
            var circle;
            console.log(mapMarkers);
            for(var mapMarker in mapMarkers) {
                console.log(mapMarker);
                circle = L.circle([mapMarker.latitude, mapMarker.longitude], mapMarker.radius);
                circle.addTo(map);
            }

        }*/

        function onLocationFound(e) {
            userMarker.setLatLng(e.latlng);
        }

        function onLocationError(e) {
            //alert(e.message);
        }

        function saveStartProgression(progression){
           progression.timeStarted = new Date().getTime();
            saveProgression(progression);
        }

      function saveFinishedProgression(progression){
          progression.timeFinished = new Date().getTime();
          saveProgression(progression);
      }

        function saveProgression(progression){
            $.ajax({
                type: "POST",
                url: Routing.generate('ajax'),
                dataType: "json",
                data: '{' +
                    '"id":' + progression.id +
                    ', "timeStarted":' + progression.timeStarted +
                    ', "timeFinished":' + progression.timeFinished + "}",
                success: function(response) {
                    showMessage("Progress Saved!", "green");
                }
            });
        }

        function setupDetailOverlay(){
            var detail = $('#detail');

            $('#showDetail').on('click', function() {
                console.log("button clicked");
                if (detail.hasClass('overlay-open')){
                    detail.removeClass('overlay-open');
                    detail.addClass('overlay-closed');
                    $(this).text("+")
                }else{
                    detail.addClass('overlay-open');
                    detail.removeClass('overlay-closed');
                    $(this).text("-")
                }
            });
        }

        function showMessage(message, color){
            var messageDiv = $('#message');
            messageDiv.text(message);
            messageDiv.css("background-color", color);
            messageDiv.show().delay(3000).fadeOut();
        }

        jQuery(document).ready(function(){

            convertVariables();
            setupMap();
            setupDetailOverlay();
            setupStoryFromProgression();

            $("#continueBtn").on("click", function(){
                //TODO check if mission or checkpoint and check distance before passing onto next part
                //TODO once all subparts are done, saveFinishProgression();

                var nextProgression = progressions[currentProgressionIndex+1];
                console.log(mapMarkers);
                if(nextProgression.missionId != 0  && nextProgression.checkpointId == 0){
                    alert("new mission");
                 var marker = mapMarkers.get("mission" + nextProgression.missionId);
                    if(measureDistance([userMarker.getLatLng().lat, userMarker.getLatLng().lng], [marker.latitude, marker.longitude])*1000 < marker.radius) {
                        addMarkerToMap(marker);
                        alert("felicitations! vous avez trouvé la Mission!");
                        showStoryFromProgression(nextProgression);
                        saveStartProgression(nextProgression);
                        currentProgressionIndex++;
                    } else{
                        alert("felicitations! mais trop loin");
                    }
                }
                else if(nextProgression.missionId != 0 && nextProgression.checkpointId != 0){
                    alert("new checkpoint");
                    var marker = mapMarkers.get("checkpoint" + nextProgression.checkpointId);
                    if(measureDistance([userMarker.getLatLng().lat, userMarker.getLatLng().lng], [marker.latitude, marker.longitude])*1000 < marker.radius) {
                        addMarkerToMap(marker);
                        alert("felicitations! vous avez trouvé le Checkpoint!");
                        showStoryFromProgression(nextProgression);
                        saveStartProgression(nextProgression);
                        currentProgressionIndex++;
                    } else{
                        alert("felicitations! mais trop loin");
                    }
                }
                else if(nextProgression.missionId == 0 && nextProgression.checkpointId == 0) {
                    alert("new chapter");
                    showStoryFromProgression(nextProgression);
                    saveStartProgression(nextProgression);
                    currentProgressionIndex++;
                }
            });
        });
    </script>
{% endblock %}